# Multi-stage Dockerfile for Kotlin/Wasm Frontend
FROM gradle:8.12-jdk17 AS build

# Accept backend URL as build argument
ARG BACKEND_URL=http://localhost:8081

# Set working directory
WORKDIR /app

# Copy gradle configuration files
COPY gradle/ gradle/
COPY gradlew gradlew.bat gradle.properties settings.gradle.kts build.gradle.kts ./

# Copy source code for shared and frontend modules
COPY shared/ shared/
COPY frontend/ frontend/

# Use gradle from base image instead of wrapper
RUN gradle wrapper --gradle-version 8.12 --distribution-type bin && \
    chmod +x gradlew

# Generate build-time configuration
RUN echo "package com.kmm.shared" > shared/src/commonMain/kotlin/com/kmm/shared/BuildConfig.kt && \
    echo "" >> shared/src/commonMain/kotlin/com/kmm/shared/BuildConfig.kt && \
    echo "/**" >> shared/src/commonMain/kotlin/com/kmm/shared/BuildConfig.kt && \
    echo " * Build-time configuration generated during Docker build" >> shared/src/commonMain/kotlin/com/kmm/shared/BuildConfig.kt && \
    echo " * Contains environment-specific values injected at build time" >> shared/src/commonMain/kotlin/com/kmm/shared/BuildConfig.kt && \
    echo " */" >> shared/src/commonMain/kotlin/com/kmm/shared/BuildConfig.kt && \
    echo "object BuildConfig {" >> shared/src/commonMain/kotlin/com/kmm/shared/BuildConfig.kt && \
    echo "    const val BACKEND_URL = \"$BACKEND_URL\"" >> shared/src/commonMain/kotlin/com/kmm/shared/BuildConfig.kt && \
    echo "    const val NODE_ENV = \"production\"" >> shared/src/commonMain/kotlin/com/kmm/shared/BuildConfig.kt && \
    echo "    const val BUILD_TIME = \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"" >> shared/src/commonMain/kotlin/com/kmm/shared/BuildConfig.kt && \
    echo "    const val VERSION = \"1.0.0\"" >> shared/src/commonMain/kotlin/com/kmm/shared/BuildConfig.kt && \
    echo "" >> shared/src/commonMain/kotlin/com/kmm/shared/BuildConfig.kt && \
    echo "    /**" >> shared/src/commonMain/kotlin/com/kmm/shared/BuildConfig.kt && \
    echo "     * Gets the appropriate backend URL for the current build" >> shared/src/commonMain/kotlin/com/kmm/shared/BuildConfig.kt && \
    echo "     */" >> shared/src/commonMain/kotlin/com/kmm/shared/BuildConfig.kt && \
    echo "    fun getBackendUrl(): String = BACKEND_URL" >> shared/src/commonMain/kotlin/com/kmm/shared/BuildConfig.kt && \
    echo "}" >> shared/src/commonMain/kotlin/com/kmm/shared/BuildConfig.kt

# Build the frontend application
RUN ./gradlew clean :frontend:wasmJsBrowserDistribution --no-daemon --stacktrace

# Production stage with nginx
FROM nginx:alpine

# Copy built frontend assets
COPY --from=build /app/frontend/build/dist/wasmJs/productionExecutable/ /usr/share/nginx/html/

# Remove default nginx config and create new one with WASM support
RUN rm /etc/nginx/conf.d/default.conf && \
    echo 'server {' > /etc/nginx/conf.d/wasm.conf && \
    echo '    listen 8080;' >> /etc/nginx/conf.d/wasm.conf && \
    echo '    server_name localhost;' >> /etc/nginx/conf.d/wasm.conf && \
    echo '    root /usr/share/nginx/html;' >> /etc/nginx/conf.d/wasm.conf && \
    echo '    index index.html;' >> /etc/nginx/conf.d/wasm.conf && \
    echo '' >> /etc/nginx/conf.d/wasm.conf && \
    echo '    # WASM files' >> /etc/nginx/conf.d/wasm.conf && \
    echo '    location ~* \.wasm$ {' >> /etc/nginx/conf.d/wasm.conf && \
    echo '        default_type application/wasm;' >> /etc/nginx/conf.d/wasm.conf && \
    echo '        expires 1y;' >> /etc/nginx/conf.d/wasm.conf && \
    echo '        add_header Cache-Control "public, max-age=31536000";' >> /etc/nginx/conf.d/wasm.conf && \
    echo '    }' >> /etc/nginx/conf.d/wasm.conf && \
    echo '' >> /etc/nginx/conf.d/wasm.conf && \
    echo '    # All other files' >> /etc/nginx/conf.d/wasm.conf && \
    echo '    location / {' >> /etc/nginx/conf.d/wasm.conf && \
    echo '        try_files $uri $uri/ /index.html;' >> /etc/nginx/conf.d/wasm.conf && \
    echo '    }' >> /etc/nginx/conf.d/wasm.conf && \
    echo '}' >> /etc/nginx/conf.d/wasm.conf

# Expose port 8080
EXPOSE 8080

# Start nginx
CMD ["nginx", "-g", "daemon off;"] 